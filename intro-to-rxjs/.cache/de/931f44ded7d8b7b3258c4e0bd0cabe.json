{"id":"index.js","dependencies":[{"name":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\package.json","includedInParent":true,"mtime":1625261731954},{"name":"rxjs","loc":{"line":1,"column":36,"index":36},"parent":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\src\\index.js","resolved":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\node_modules\\rxjs\\dist\\esm5\\index.js"},{"name":"rxjs/operators","loc":{"line":2,"column":75,"index":120},"parent":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\src\\index.js","resolved":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\node_modules\\rxjs\\dist\\esm5\\operators\\index.js"},{"name":"rxjs/ajax","loc":{"line":3,"column":21,"index":159},"parent":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\src\\index.js","resolved":"D:\\All Downloads\\WebDev\\GitHub\\ztm-angular-course\\intro-to-rxjs\\node_modules\\rxjs\\dist\\esm5\\ajax\\index.js"}],"generated":{"js":"\"use strict\";\n\nvar _rxjs = require(\"rxjs\");\nvar _operators = require(\"rxjs/operators\");\nvar _ajax = require(\"rxjs/ajax\");\n//EXAMPLE of using an observable and fetching a REST API endpoint: const observable = from(fetch('https://jsonplaceholder.typicode.com/todos/1'))\n\n/*EXAMPLE of pipable operators, the map() pipe operator\r\nconst observable = of(1,2,3,4,5).pipe(\r\n    map((value) => `$${value}`)\r\n)\r\n*/\n\n/*const observable = fromEvent(document, 'keydown').pipe(\r\n    map((event) => {\r\n        return event.code === \"Space\" ? event.code : null;\r\n    })\r\n    map((event) => event.code),\r\n    filter((code) => code === \"Space\")\r\n);*/\n\n// Use tap() operator to check the values passed through observables, use take() to limit the observable's values to a maximum number, \n//in this case only 5 values will be processed\n/*const observable = interval(500).pipe(\r\n    take(5),\r\n    tap({\r\n        next(val){\r\n            console.log(val)\r\n        }\r\n    }),\r\n    reduce(\r\n        (acc, val) => acc + val,\r\n        0\r\n    )\r\n)*/\n\nvar button = document.querySelector('#btn');\nvar observable = (0, _rxjs.fromEvent)(button, 'click').pipe(\n/*mergeMap(() => { //mergMap() operator subscribes to the observable from within the pipe\r\n    /*return ajax.getJSON(\r\n        'https://jsonplaceholder.typicode.com/todos/1'\r\n        )*/\n/* return interval(1000).pipe(\r\n     tap(console.log)\r\n     //take(5)  -  the interval() is also an observable, it's an inner observable that we can also use the take() operator \r\n     //to complete just the inner observable and keep the outter observalble running\r\n )\r\n}),\r\n//take(5) - stops the outer observable */\n/*switchMap(() => { //switchMap() operator subscribes to the observable from within the pipe and ensures only one request will be processed at a time, \r\n                    //this would help with slow data connections like 3G\r\n    return ajax.getJSON(\r\n        'https://jsonplaceholder.typicode.com/todos/1'\r\n        ).pipe(\r\n        take(5),\r\n        tap({\r\n            complete() {\r\n                console.log('inner observable completed')\r\n            }\r\n        }) \r\n    )\r\n}),*/\n/*concatMap(() => { //concatMap() operator ensures the exisitng operator completes before processing another one, FIFO basically, could handle if a user clicks the button multiple times\r\n                    //but this can cause a traffic jam of operators, slowing down the application\r\n    return ajax.getJSON(\r\n        'https://jsonplaceholder.typicode.com/todos/1'\r\n        ).pipe(\r\n        take(5),\r\n        tap({\r\n            complete() {\r\n                console.log('inner observable completed')\r\n            }\r\n        }) \r\n    )\r\n}),*/\n(0, _operators.exhaustMap)(function () {\n  //exhaustMap() operator can be used if you want to process a form and ignore other oservables until the current observable completes.\n  return _ajax.ajax.getJSON('https://jsonplaceholder.typicode.com/todos/1').pipe((0, _operators.take)(5), (0, _operators.tap)({\n    complete: function complete() {\n      console.log('inner observable completed');\n    }\n  }));\n}));\n\n//Registering a new observer\nvar subscription = observable.subscribe({\n  next: function next(value) {\n    console.log(value);\n  },\n  complete: function complete() {\n    console.log('complete');\n  }\n});\nconsole.log('hello');\n\n/*\r\nANALOGY (Retaurant Orders) for the Flattening operators for subscribing to inner observables:\r\n\r\nswitchMap() - Stop working on the current order and start working on the new order. Only the latest order will be finished.\r\n\r\nconcatMap() - The order gets added to a queue. You finish whatever order you're working on. Once you finish the order, you wil work on the next order.\r\n\r\nmergeMap() - You will work on all orders at the same time as soon as you're given them.\r\n\r\nexhaustMap() - You ignore new orders and finish whatever order you'e currently working on. Once finished, you are free to accept new orders.\r\n*/"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":3,"column":0},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":4},"source":"index.js","original":{"line":1,"column":0},"name":"_rxjs"},{"generated":{"line":3,"column":9},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":3,"column":12},"source":"index.js","original":{"line":1,"column":0},"name":"require"},{"generated":{"line":3,"column":19},"source":"index.js","original":{"line":1,"column":0}},{"generated":{"line":4,"column":0},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":4,"column":4},"source":"index.js","original":{"line":2,"column":0},"name":"_operators"},{"generated":{"line":4,"column":14},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":4,"column":17},"source":"index.js","original":{"line":2,"column":0},"name":"require"},{"generated":{"line":4,"column":24},"source":"index.js","original":{"line":2,"column":0}},{"generated":{"line":5,"column":0},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":4},"source":"index.js","original":{"line":3,"column":0},"name":"_ajax"},{"generated":{"line":5,"column":9},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":5,"column":12},"source":"index.js","original":{"line":3,"column":0},"name":"require"},{"generated":{"line":5,"column":19},"source":"index.js","original":{"line":3,"column":0}},{"generated":{"line":6,"column":0},"source":"index.js","original":{"line":5,"column":0}},{"generated":{"line":8,"column":0},"source":"index.js","original":{"line":7,"column":0}},{"generated":{"line":9,"column":0},"source":"index.js","original":{"line":8,"column":0}},{"generated":{"line":10,"column":0},"source":"index.js","original":{"line":9,"column":0}},{"generated":{"line":11,"column":0},"source":"index.js","original":{"line":10,"column":0}},{"generated":{"line":12,"column":0},"source":"index.js","original":{"line":11,"column":0}},{"generated":{"line":14,"column":0},"source":"index.js","original":{"line":13,"column":0}},{"generated":{"line":15,"column":0},"source":"index.js","original":{"line":14,"column":0}},{"generated":{"line":16,"column":0},"source":"index.js","original":{"line":15,"column":0}},{"generated":{"line":17,"column":0},"source":"index.js","original":{"line":16,"column":0}},{"generated":{"line":18,"column":0},"source":"index.js","original":{"line":17,"column":0}},{"generated":{"line":19,"column":0},"source":"index.js","original":{"line":18,"column":0}},{"generated":{"line":20,"column":0},"source":"index.js","original":{"line":19,"column":0}},{"generated":{"line":22,"column":0},"source":"index.js","original":{"line":21,"column":0}},{"generated":{"line":23,"column":0},"source":"index.js","original":{"line":22,"column":0}},{"generated":{"line":24,"column":0},"source":"index.js","original":{"line":23,"column":0}},{"generated":{"line":25,"column":0},"source":"index.js","original":{"line":24,"column":0}},{"generated":{"line":26,"column":0},"source":"index.js","original":{"line":25,"column":0}},{"generated":{"line":27,"column":0},"source":"index.js","original":{"line":26,"column":0}},{"generated":{"line":28,"column":0},"source":"index.js","original":{"line":27,"column":0}},{"generated":{"line":29,"column":0},"source":"index.js","original":{"line":28,"column":0}},{"generated":{"line":30,"column":0},"source":"index.js","original":{"line":29,"column":0}},{"generated":{"line":31,"column":0},"source":"index.js","original":{"line":30,"column":0}},{"generated":{"line":32,"column":0},"source":"index.js","original":{"line":31,"column":0}},{"generated":{"line":33,"column":0},"source":"index.js","original":{"line":32,"column":0}},{"generated":{"line":34,"column":0},"source":"index.js","original":{"line":33,"column":0}},{"generated":{"line":35,"column":0},"source":"index.js","original":{"line":34,"column":0}},{"generated":{"line":37,"column":0},"source":"index.js","original":{"line":36,"column":0}},{"generated":{"line":37,"column":4},"source":"index.js","original":{"line":36,"column":6},"name":"button"},{"generated":{"line":37,"column":10},"source":"index.js","original":{"line":36,"column":12}},{"generated":{"line":37,"column":13},"source":"index.js","original":{"line":36,"column":15},"name":"document"},{"generated":{"line":37,"column":21},"source":"index.js","original":{"line":36,"column":23}},{"generated":{"line":37,"column":22},"source":"index.js","original":{"line":36,"column":24},"name":"querySelector"},{"generated":{"line":37,"column":35},"source":"index.js","original":{"line":36,"column":37}},{"generated":{"line":37,"column":36},"source":"index.js","original":{"line":36,"column":38}},{"generated":{"line":37,"column":42},"source":"index.js","original":{"line":36,"column":44}},{"generated":{"line":37,"column":43},"source":"index.js","original":{"line":36,"column":45}},{"generated":{"line":38,"column":0},"source":"index.js","original":{"line":37,"column":0}},{"generated":{"line":38,"column":4},"source":"index.js","original":{"line":37,"column":6},"name":"observable"},{"generated":{"line":38,"column":14},"source":"index.js","original":{"line":37,"column":16}},{"generated":{"line":38,"column":17},"source":"index.js","original":{"line":37,"column":19}},{"generated":{"line":38,"column":21},"source":"index.js","original":{"line":37,"column":19},"name":"fromEvent"},{"generated":{"line":38,"column":36},"source":"index.js","original":{"line":37,"column":28}},{"generated":{"line":38,"column":38},"source":"index.js","original":{"line":38,"column":4},"name":"button"},{"generated":{"line":38,"column":44},"source":"index.js","original":{"line":38,"column":10}},{"generated":{"line":38,"column":46},"source":"index.js","original":{"line":38,"column":12}},{"generated":{"line":38,"column":53},"source":"index.js","original":{"line":39,"column":0}},{"generated":{"line":38,"column":54},"source":"index.js","original":{"line":39,"column":1}},{"generated":{"line":38,"column":55},"source":"index.js","original":{"line":39,"column":2},"name":"pipe"},{"generated":{"line":38,"column":59},"source":"index.js","original":{"line":39,"column":6}},{"generated":{"line":39,"column":0},"source":"index.js","original":{"line":40,"column":4}},{"generated":{"line":40,"column":0},"source":"index.js","original":{"line":41,"column":0}},{"generated":{"line":41,"column":0},"source":"index.js","original":{"line":42,"column":0}},{"generated":{"line":42,"column":0},"source":"index.js","original":{"line":43,"column":0}},{"generated":{"line":43,"column":0},"source":"index.js","original":{"line":44,"column":7}},{"generated":{"line":44,"column":0},"source":"index.js","original":{"line":45,"column":0}},{"generated":{"line":45,"column":0},"source":"index.js","original":{"line":46,"column":0}},{"generated":{"line":46,"column":0},"source":"index.js","original":{"line":47,"column":0}},{"generated":{"line":47,"column":0},"source":"index.js","original":{"line":48,"column":0}},{"generated":{"line":48,"column":0},"source":"index.js","original":{"line":49,"column":0}},{"generated":{"line":49,"column":0},"source":"index.js","original":{"line":50,"column":0}},{"generated":{"line":50,"column":0},"source":"index.js","original":{"line":51,"column":4}},{"generated":{"line":51,"column":0},"source":"index.js","original":{"line":52,"column":0}},{"generated":{"line":52,"column":0},"source":"index.js","original":{"line":53,"column":0}},{"generated":{"line":53,"column":0},"source":"index.js","original":{"line":54,"column":0}},{"generated":{"line":54,"column":0},"source":"index.js","original":{"line":55,"column":0}},{"generated":{"line":55,"column":0},"source":"index.js","original":{"line":56,"column":0}},{"generated":{"line":56,"column":0},"source":"index.js","original":{"line":57,"column":0}},{"generated":{"line":57,"column":0},"source":"index.js","original":{"line":58,"column":0}},{"generated":{"line":58,"column":0},"source":"index.js","original":{"line":59,"column":0}},{"generated":{"line":59,"column":0},"source":"index.js","original":{"line":60,"column":0}},{"generated":{"line":60,"column":0},"source":"index.js","original":{"line":61,"column":0}},{"generated":{"line":61,"column":0},"source":"index.js","original":{"line":62,"column":0}},{"generated":{"line":62,"column":0},"source":"index.js","original":{"line":63,"column":0}},{"generated":{"line":63,"column":0},"source":"index.js","original":{"line":64,"column":4}},{"generated":{"line":64,"column":0},"source":"index.js","original":{"line":65,"column":0}},{"generated":{"line":65,"column":0},"source":"index.js","original":{"line":66,"column":0}},{"generated":{"line":66,"column":0},"source":"index.js","original":{"line":67,"column":0}},{"generated":{"line":67,"column":0},"source":"index.js","original":{"line":68,"column":0}},{"generated":{"line":68,"column":0},"source":"index.js","original":{"line":69,"column":0}},{"generated":{"line":69,"column":0},"source":"index.js","original":{"line":70,"column":0}},{"generated":{"line":70,"column":0},"source":"index.js","original":{"line":71,"column":0}},{"generated":{"line":71,"column":0},"source":"index.js","original":{"line":72,"column":0}},{"generated":{"line":72,"column":0},"source":"index.js","original":{"line":73,"column":0}},{"generated":{"line":73,"column":0},"source":"index.js","original":{"line":74,"column":0}},{"generated":{"line":74,"column":0},"source":"index.js","original":{"line":75,"column":0}},{"generated":{"line":75,"column":0},"source":"index.js","original":{"line":76,"column":0}},{"generated":{"line":76,"column":0},"source":"index.js","original":{"line":77,"column":4}},{"generated":{"line":76,"column":4},"source":"index.js","original":{"line":77,"column":4},"name":"exhaustMap"},{"generated":{"line":76,"column":25},"source":"index.js","original":{"line":77,"column":14}},{"generated":{"line":76,"column":27},"source":"index.js","original":{"line":77,"column":15}},{"generated":{"line":76,"column":39},"source":"index.js","original":{"line":77,"column":21}},{"generated":{"line":77,"column":2},"source":"index.js","original":{"line":77,"column":23}},{"generated":{"line":78,"column":2},"source":"index.js","original":{"line":78,"column":8}},{"generated":{"line":78,"column":9},"source":"index.js","original":{"line":78,"column":15},"name":"ajax"},{"generated":{"line":78,"column":19},"source":"index.js","original":{"line":78,"column":19}},{"generated":{"line":78,"column":20},"source":"index.js","original":{"line":78,"column":20},"name":"getJSON"},{"generated":{"line":78,"column":27},"source":"index.js","original":{"line":78,"column":27}},{"generated":{"line":78,"column":28},"source":"index.js","original":{"line":79,"column":12}},{"generated":{"line":78,"column":74},"source":"index.js","original":{"line":80,"column":12}},{"generated":{"line":78,"column":75},"source":"index.js","original":{"line":80,"column":13}},{"generated":{"line":78,"column":76},"source":"index.js","original":{"line":80,"column":14},"name":"pipe"},{"generated":{"line":78,"column":80},"source":"index.js","original":{"line":80,"column":18}},{"generated":{"line":78,"column":81},"source":"index.js","original":{"line":81,"column":12}},{"generated":{"line":78,"column":85},"source":"index.js","original":{"line":81,"column":12},"name":"take"},{"generated":{"line":78,"column":100},"source":"index.js","original":{"line":81,"column":16}},{"generated":{"line":78,"column":102},"source":"index.js","original":{"line":81,"column":17}},{"generated":{"line":78,"column":103},"source":"index.js","original":{"line":81,"column":18}},{"generated":{"line":78,"column":104},"source":"index.js","original":{"line":81,"column":19}},{"generated":{"line":78,"column":106},"source":"index.js","original":{"line":82,"column":12}},{"generated":{"line":78,"column":110},"source":"index.js","original":{"line":82,"column":12},"name":"tap"},{"generated":{"line":78,"column":124},"source":"index.js","original":{"line":82,"column":15}},{"generated":{"line":78,"column":126},"source":"index.js","original":{"line":82,"column":16}},{"generated":{"line":79,"column":4},"source":"index.js","original":{"line":83,"column":16},"name":"complete"},{"generated":{"line":79,"column":12},"source":"index.js","original":{"line":83,"column":24}},{"generated":{"line":79,"column":23},"source":"index.js","original":{"line":83,"column":24},"name":"complete"},{"generated":{"line":79,"column":32},"source":"index.js","original":{"line":83,"column":24}},{"generated":{"line":79,"column":34},"source":"index.js","original":{"line":83,"column":27}},{"generated":{"line":80,"column":6},"source":"index.js","original":{"line":84,"column":20},"name":"console"},{"generated":{"line":80,"column":13},"source":"index.js","original":{"line":84,"column":27}},{"generated":{"line":80,"column":14},"source":"index.js","original":{"line":84,"column":28},"name":"log"},{"generated":{"line":80,"column":17},"source":"index.js","original":{"line":84,"column":31}},{"generated":{"line":80,"column":18},"source":"index.js","original":{"line":84,"column":32}},{"generated":{"line":80,"column":46},"source":"index.js","original":{"line":84,"column":60}},{"generated":{"line":80,"column":47},"source":"index.js","original":{"line":84,"column":61}},{"generated":{"line":81,"column":4},"source":"index.js","original":{"line":85,"column":16}},{"generated":{"line":82,"column":2},"source":"index.js","original":{"line":86,"column":12}},{"generated":{"line":82,"column":3},"source":"index.js","original":{"line":86,"column":13}},{"generated":{"line":82,"column":4},"source":"index.js","original":{"line":87,"column":8}},{"generated":{"line":82,"column":5},"source":"index.js","original":{"line":87,"column":9}},{"generated":{"line":83,"column":0},"source":"index.js","original":{"line":88,"column":4}},{"generated":{"line":83,"column":1},"source":"index.js","original":{"line":88,"column":5}},{"generated":{"line":83,"column":2},"source":"index.js","original":{"line":89,"column":0}},{"generated":{"line":83,"column":3},"source":"index.js","original":{"line":89,"column":1}},{"generated":{"line":85,"column":0},"source":"index.js","original":{"line":92,"column":0}},{"generated":{"line":86,"column":0},"source":"index.js","original":{"line":93,"column":0}},{"generated":{"line":86,"column":4},"source":"index.js","original":{"line":93,"column":6},"name":"subscription"},{"generated":{"line":86,"column":16},"source":"index.js","original":{"line":93,"column":18}},{"generated":{"line":86,"column":19},"source":"index.js","original":{"line":93,"column":21},"name":"observable"},{"generated":{"line":86,"column":29},"source":"index.js","original":{"line":93,"column":31}},{"generated":{"line":86,"column":30},"source":"index.js","original":{"line":93,"column":32},"name":"subscribe"},{"generated":{"line":86,"column":39},"source":"index.js","original":{"line":93,"column":41}},{"generated":{"line":86,"column":40},"source":"index.js","original":{"line":93,"column":42}},{"generated":{"line":87,"column":2},"source":"index.js","original":{"line":94,"column":4},"name":"next"},{"generated":{"line":87,"column":6},"source":"index.js","original":{"line":94,"column":8}},{"generated":{"line":87,"column":17},"source":"index.js","original":{"line":94,"column":8},"name":"next"},{"generated":{"line":87,"column":22},"source":"index.js","original":{"line":94,"column":9},"name":"value"},{"generated":{"line":87,"column":27},"source":"index.js","original":{"line":94,"column":14}},{"generated":{"line":87,"column":29},"source":"index.js","original":{"line":94,"column":16}},{"generated":{"line":88,"column":4},"source":"index.js","original":{"line":95,"column":7},"name":"console"},{"generated":{"line":88,"column":11},"source":"index.js","original":{"line":95,"column":14}},{"generated":{"line":88,"column":12},"source":"index.js","original":{"line":95,"column":15},"name":"log"},{"generated":{"line":88,"column":15},"source":"index.js","original":{"line":95,"column":18}},{"generated":{"line":88,"column":16},"source":"index.js","original":{"line":95,"column":19},"name":"value"},{"generated":{"line":88,"column":21},"source":"index.js","original":{"line":95,"column":24}},{"generated":{"line":88,"column":22},"source":"index.js","original":{"line":95,"column":25}},{"generated":{"line":89,"column":2},"source":"index.js","original":{"line":96,"column":4}},{"generated":{"line":89,"column":3},"source":"index.js","original":{"line":96,"column":5}},{"generated":{"line":90,"column":2},"source":"index.js","original":{"line":97,"column":4},"name":"complete"},{"generated":{"line":90,"column":10},"source":"index.js","original":{"line":97,"column":12}},{"generated":{"line":90,"column":21},"source":"index.js","original":{"line":97,"column":12},"name":"complete"},{"generated":{"line":90,"column":30},"source":"index.js","original":{"line":97,"column":12}},{"generated":{"line":90,"column":32},"source":"index.js","original":{"line":97,"column":15}},{"generated":{"line":91,"column":4},"source":"index.js","original":{"line":98,"column":8},"name":"console"},{"generated":{"line":91,"column":11},"source":"index.js","original":{"line":98,"column":15}},{"generated":{"line":91,"column":12},"source":"index.js","original":{"line":98,"column":16},"name":"log"},{"generated":{"line":91,"column":15},"source":"index.js","original":{"line":98,"column":19}},{"generated":{"line":91,"column":16},"source":"index.js","original":{"line":98,"column":20}},{"generated":{"line":91,"column":26},"source":"index.js","original":{"line":98,"column":30}},{"generated":{"line":91,"column":27},"source":"index.js","original":{"line":98,"column":31}},{"generated":{"line":92,"column":2},"source":"index.js","original":{"line":99,"column":4}},{"generated":{"line":93,"column":0},"source":"index.js","original":{"line":100,"column":0}},{"generated":{"line":93,"column":1},"source":"index.js","original":{"line":100,"column":1}},{"generated":{"line":93,"column":2},"source":"index.js","original":{"line":100,"column":2}},{"generated":{"line":94,"column":0},"source":"index.js","original":{"line":102,"column":0},"name":"console"},{"generated":{"line":94,"column":7},"source":"index.js","original":{"line":102,"column":7}},{"generated":{"line":94,"column":8},"source":"index.js","original":{"line":102,"column":8},"name":"log"},{"generated":{"line":94,"column":11},"source":"index.js","original":{"line":102,"column":11}},{"generated":{"line":94,"column":12},"source":"index.js","original":{"line":102,"column":12}},{"generated":{"line":94,"column":19},"source":"index.js","original":{"line":102,"column":19}},{"generated":{"line":94,"column":20},"source":"index.js","original":{"line":102,"column":20}},{"generated":{"line":96,"column":0},"source":"index.js","original":{"line":104,"column":0}},{"generated":{"line":97,"column":0},"source":"index.js","original":{"line":105,"column":0}},{"generated":{"line":98,"column":0},"source":"index.js","original":{"line":106,"column":0}},{"generated":{"line":99,"column":0},"source":"index.js","original":{"line":107,"column":0}},{"generated":{"line":100,"column":0},"source":"index.js","original":{"line":108,"column":0}},{"generated":{"line":101,"column":0},"source":"index.js","original":{"line":109,"column":0}},{"generated":{"line":102,"column":0},"source":"index.js","original":{"line":110,"column":0}},{"generated":{"line":103,"column":0},"source":"index.js","original":{"line":111,"column":0}},{"generated":{"line":104,"column":0},"source":"index.js","original":{"line":112,"column":0}},{"generated":{"line":105,"column":0},"source":"index.js","original":{"line":113,"column":0}},{"generated":{"line":106,"column":0},"source":"index.js","original":{"line":114,"column":0}}],"sources":{"index.js":"import { fromEvent, interval } from \"rxjs\";\r\nimport { map, mergeMap, switchMap, concatMap, exhaustMap, take, tap } from 'rxjs/operators'\r\nimport { ajax } from 'rxjs/ajax'\r\n\r\n//EXAMPLE of using an observable and fetching a REST API endpoint: const observable = from(fetch('https://jsonplaceholder.typicode.com/todos/1'))\r\n\r\n/*EXAMPLE of pipable operators, the map() pipe operator\r\nconst observable = of(1,2,3,4,5).pipe(\r\n    map((value) => `$${value}`)\r\n)\r\n*/\r\n\r\n/*const observable = fromEvent(document, 'keydown').pipe(\r\n    map((event) => {\r\n        return event.code === \"Space\" ? event.code : null;\r\n    })\r\n    map((event) => event.code),\r\n    filter((code) => code === \"Space\")\r\n);*/\r\n\r\n// Use tap() operator to check the values passed through observables, use take() to limit the observable's values to a maximum number, \r\n//in this case only 5 values will be processed\r\n/*const observable = interval(500).pipe(\r\n    take(5),\r\n    tap({\r\n        next(val){\r\n            console.log(val)\r\n        }\r\n    }),\r\n    reduce(\r\n        (acc, val) => acc + val,\r\n        0\r\n    )\r\n)*/\r\n\r\nconst button = document.querySelector('#btn')\r\nconst observable = fromEvent(\r\n    button, 'click'\r\n).pipe(\r\n    /*mergeMap(() => { //mergMap() operator subscribes to the observable from within the pipe\r\n        /*return ajax.getJSON(\r\n            'https://jsonplaceholder.typicode.com/todos/1'\r\n            )*/\r\n       /* return interval(1000).pipe(\r\n            tap(console.log)\r\n            //take(5)  -  the interval() is also an observable, it's an inner observable that we can also use the take() operator \r\n            //to complete just the inner observable and keep the outter observalble running\r\n        )\r\n    }),\r\n    //take(5) - stops the outer observable */\r\n    /*switchMap(() => { //switchMap() operator subscribes to the observable from within the pipe and ensures only one request will be processed at a time, \r\n                        //this would help with slow data connections like 3G\r\n        return ajax.getJSON(\r\n            'https://jsonplaceholder.typicode.com/todos/1'\r\n            ).pipe(\r\n            take(5),\r\n            tap({\r\n                complete() {\r\n                    console.log('inner observable completed')\r\n                }\r\n            }) \r\n        )\r\n    }),*/\r\n    /*concatMap(() => { //concatMap() operator ensures the exisitng operator completes before processing another one, FIFO basically, could handle if a user clicks the button multiple times\r\n                        //but this can cause a traffic jam of operators, slowing down the application\r\n        return ajax.getJSON(\r\n            'https://jsonplaceholder.typicode.com/todos/1'\r\n            ).pipe(\r\n            take(5),\r\n            tap({\r\n                complete() {\r\n                    console.log('inner observable completed')\r\n                }\r\n            }) \r\n        )\r\n    }),*/\r\n    exhaustMap(() => { //exhaustMap() operator can be used if you want to process a form and ignore other oservables until the current observable completes.\r\n        return ajax.getJSON(\r\n            'https://jsonplaceholder.typicode.com/todos/1'\r\n            ).pipe(\r\n            take(5),\r\n            tap({\r\n                complete() {\r\n                    console.log('inner observable completed')\r\n                }\r\n            }) \r\n        )\r\n    }),\r\n)\r\n\r\n\r\n//Registering a new observer\r\nconst subscription = observable.subscribe({\r\n    next(value) {\r\n       console.log(value)\r\n    },\r\n    complete() {\r\n        console.log('complete')\r\n    }\r\n})\r\n\r\nconsole.log('hello')\r\n\r\n/*\r\nANALOGY (Retaurant Orders) for the Flattening operators for subscribing to inner observables:\r\n\r\nswitchMap() - Stop working on the current order and start working on the new order. Only the latest order will be finished.\r\n\r\nconcatMap() - The order gets added to a queue. You finish whatever order you're working on. Once you finish the order, you wil work on the next order.\r\n\r\nmergeMap() - You will work on all orders at the same time as soon as you're given them.\r\n\r\nexhaustMap() - You ignore new orders and finish whatever order you'e currently working on. Once finished, you are free to accept new orders.\r\n*/"},"lineCount":null}},"error":null,"hash":"2e4c1c57e3067f026b4cd7a7659ef260","cacheData":{"env":{}}}